<?xml version="1.0"?>
<!--
 * This file is part of JSynthLib.
 *
 * JSynthLib is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * JSynthLib is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with JSynthLib; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA
-->
<!--
	Ant build file for JSynthLib.

	Use 'ant -p' to see the available targets for this build file.
	For using different defaults (e.g. for build.compiler, version), define
	the specific properties in a file called 'build.properties'.

	Remko Troncon <remko@ulyssis.org>

	Version: $Id$
-->

<project name="JSynthLib" default="build" basedir=".">
	<!-- Don't indent this .. all whitespace is copied to output. -->
	<description>  JSynthLib: A universal synth librarian

Most usefult targets:
  all build dist run

</description>


	<!-- User-defined properties -->
	<property file="build.properties"/>

	<!-- Defaults -->
	<property name="src" location="."/>
	<property name="build" location="build"/>
	<property name="bin" location="${build}/bin"/>
	<property name="docs" location="${build}/doc"/>
	<property name="api_docs" location="${docs}/api-docs"/>
	<property name="dist"  location="${build}/distribution"/>
	<property name="synthdrivers"  location="${build}/synthdrivers"/>

	<property name="deprecation"  value="on"/>
	<property name="show-private-classes"  value="false"/>

	<!-- Conditions -->
	<condition property="isMacOS"> <os family="mac"/> </condition>
	<condition property="isWindows"> <os family="windows"/> </condition>
	<condition property="isUnix"> <os family="unix"/> </condition>

	<!-- Initialization -->
	<target name="init">
		<!-- Create timestamp -->
		<tstamp/>

		<!-- Create build dir -->
		<mkdir dir="${build}"/>

		<!-- Set version number -->
		<property name="version" value="${DSTAMP}cvs"/>
		<filter token="version" value="${version}"/>
		<!--<copy file="Constants.java" todir="${build}" filtering="true"/>-->
	</target>


	<!-- Building -->
	<!--
	| Note that 'build' is split into build-code and build-rsc since
	| update-drivers needs to run in the middle.  Neither has a 'description'
	| tag, as only 'build' should be externally accessible.
	-->
	<target name="build"
			description="Build the complete package"
			depends="init,build-code,build-rsc">
	</target>

	<!-- Compile source code only -->
	<target name="build-code" depends="init">
		<mkdir dir="${bin}"/>
		<!-- Compile -->
		<javac srcdir="${src}" destdir="${bin}" 
			classpath="groovy.jar"
			deprecation="${deprecation}"
			source="1.5" target="1.5"
			includeantruntime="false">
			<include name="**/*.java"/>
			<exclude name="core/MacOSXMidiWrapper.java" unless="isMacOS"/>
			<exclude name="midiprovider/**"/>
		</javac>
	</target>

	<!-- Install all non-code files. -->
	<target name="build-rsc" depends="init,update-drivers">
		<mkdir dir="${bin}"/>
		<!-- Images -->
		<copy todir="${bin}/images">
			<fileset dir="images"/>
		</copy>
		<!-- Resources -->
		<copy todir="${bin}/org">
			<fileset dir="org" excludes="**/*.java **/*.groovy **/package.html"/>
		</copy>
		<copy file="synthdrivers.properties" todir="${bin}"/>
		<copy todir="${bin}/synthdrivers">
			<fileset dir="synthdrivers">
				<include name="**/*.gif"/>
				<include name="**/*.png"/>
				<include name="**/*.syx"/>
				<include name="**/*.dat"/>
			</fileset>
		</copy>
		<!-- Extra files -->
		<copy file="doc/documentation.html" todir="${docs}"/>
		<copy file="doc/programming.html" todir="${docs}"/>
	</target>


	<target name="build-run"
			description="Build the official runnable file set"
			depends="build">
		<mkdir dir="${build}/run"/>

		<!-- Create JAR -->
		<jar jarfile="${build}/run/${ant.project.name}.jar"
			 basedir="${bin}"
			 excludes="core/DeviceListWriter*.class,JSynthLib.properties,
					   linuxdevices.conf">
			<manifest>
				<attribute name="Built-By" value="${user.name}"/>
				<attribute name="Main-Class" value="JSynthLib"/>
				<attribute name="Class-Path" value="groovy.jar"/>
			</manifest>
		</jar>

		<!-- Assemble extras -->
		<copy todir="${build}/run">
			<fileset dir=".">
				<include name="groovy.jar"/>
			</fileset>
		</copy>
	</target>


	<!-- Documentation -->
	<target name="api_docs"
			description="Generate API documentation"
			depends="init,build,api_docs_check"
			unless="api_docs_uptodate">
		<mkdir dir="${api_docs}"/>
		<javadoc destdir="${api_docs}" nohelp="true" private="${show-private-classes}"
			classpath="groovy.jar">
			<!-- Pick out only the source dirs -->
			<packageset dir="${src}">
				<include name="com/**"/>
				<include name="core/**"/>
				<include name="images/**" />
				<include name="org/**" />
				<include name="synthdrivers/**" />
			</packageset>
		</javadoc>
	</target>

	<!-- Determine if api_docs needs to run -->
	<target name="api_docs_check">
		<uptodate property="api_docs_uptodate">
			<!-- exact copy of api_docs/packageset -->
			<srcfiles dir="${src}">
				<include name="com/**"/>
				<include name="core/**"/>
				<include name="images/**" />
				<include name="org/**" />
				<include name="synthdrivers/**" />
			</srcfiles>
			<mapper type="merge" to="${api_docs}/package-list"/>
		</uptodate>
	</target>

	<target name="doc"
		description="Short form of 'api_docs'"
		depends="api_docs"/>


	<!-- Distribution -->
	<target name="dist"
			description="Create package distribution files (bins, sources, docs)"
			depends="init,build-run,api_docs">
		<mkdir dir="${dist}"/>

		<property name="dist-name" value="${ant.project.name}-${version}"/>

		<!-- Create runnable bundles -->
		<zip destfile="${dist}/${dist-name}-bin.zip">
			<zipfileset dir="${build}/run" includes="**"
				prefix="${ant.project.name}-${version}/"/>
			<zipfileset dir="." includes="doc/**"
				prefix="${ant.project.name}-${version}/"/>
		</zip>
		<checksum file="${dist}/${dist-name}-bin.zip"
				  forceoverwrite="yes" fileext=".md5"/>

		<tar destfile="${dist}/${dist-name}-bin.tar.gz"
			 compression="gzip" casesensitive="yes" longfile="gnu">
			<tarfileset dir="${build}/run" includes="**"
				prefix="${ant.project.name}-${version}/"/>
			<tarfileset dir="." includes="doc/**"
				prefix="${ant.project.name}-${version}/"/>
		</tar>
		<checksum file="${dist}/${dist-name}-bin.tar.gz"
				  forceoverwrite="yes" fileext=".md5"/>

		<!-- Create sources bundles -->
		<zip destfile="${dist}/${dist-name}-src.zip">
			<zipfileset dir="." prefix="${ant.project.name}-${version}-src/">
				<exclude name="bin/**"/>
				<exclude name="build/**"/>
				<exclude name="**/CVS"/>
			</zipfileset>
		</zip>
		<checksum file="${dist}/${dist-name}-src.zip"
				  forceoverwrite="yes" fileext=".md5"/>

		<tar destfile="${dist}/${dist-name}-src.tar.gz"
			 compression="gzip" casesensitive="yes" longfile="gnu">
			<tarfileset dir="." prefix="${ant.project.name}-${version}-src/">
				<exclude name="bin/**"/>
				<exclude name="build/**"/>
				<exclude name="**/CVS"/>
			</tarfileset>
		</tar>
		<checksum file="${dist}/${dist-name}-src.tar.gz"
				  forceoverwrite="yes" fileext=".md5"/>

		<!-- Create API docs bundle -->
		<tar destfile="${dist}/${dist-name}-api.tar.gz"
			 compression="gzip" casesensitive="yes" longfile="gnu">
			<!-- bare archive can be use by Eclipse -->
			<tarfileset dir="${api_docs}" includes="**"/>
		</tar>
	</target>


	<!-- Run -->
	<target name="run"
		description="Run the application"
		depends="init,build">
		<java classname="JSynthLib" dir="${bin}" fork="true"/>
	</target>


	<!-- Run with debug level 2 -->
	<target name="run-debug"
		description="Run the application with debug level 2"
		depends="init,build">
		<java classname="JSynthLib" dir="${bin}" fork="true">
			<arg value="2"/>
		</java>
	</target>

	<target name="rd" depends="run-debug"
		description="Short form of 'run-debug'"/>


	<!-- Update driver information -->
	<target name="update-drivers"
		description="Update synth drivers information"
		depends="init,build-code">
		<!-- File is gen'd in current dir -->
		<java classname="core.DeviceListWriter" dir="${bin}" fork="true">
			<!--arg value="-v"/-->
		</java>
		<copy todir="${src}" file="${bin}/synthdrivers.properties" />
	</target>

	<target name="ud"
		description="Short form of 'update-drivers'"
		depends="update-drivers"/>

	<!-- Cleanup -->
	<target name="clean"
		description="Cleanup all generated files">
		<delete dir="${build}"/>
	</target>


	<!-- ==================== Administrative targets  ======================= -->
	<target name="clean-build"
		description="First 'clean' and then 'build'"
		depends="clean,build"/>
	<target name="cb"
		description="Short form of 'clean-build'"
		depends="clean-build"/>

	<target name="all"
		description="Cleanup first then rebuild everything (docs, dists ...)"
		depends="clean,build,dist,api_docs"/>
</project>
