package synthdrivers.RocktronIntellifex;

import java.io.UnsupportedEncodingException;

import core.Driver;
import core.JSLFrame;
import core.Patch;
import core.SysexHandler;

/**
 * Driver class for Rocktron Intellifex S81 patch.
 * @author  Klaus Sailer
 * @version $Id$
 */
public class RocktronIntellifexS81Driver extends Driver {
    /** Header Size */
    private static final int HSIZE = 6;
    /** Data Size */
    private static final int SSIZE = 256;

    private static final byte[] defaultPatchData = {
                                                      0x00,0x00,0x01,0x00,0x02,0x00,0x03,0x00,0x04,0x00,0x05,0x00,0x06,0x00,0x07,0x00,
                                                      0x08,0x00,0x09,0x00,0x0A,0x00,0x0B,0x00,0x0C,0x00,0x0D,0x00,0x0E,0x00,0x0F,0x00,
                                                      0x10,0x00,0x11,0x00,0x12,0x00,0x13,0x00,0x14,0x00,0x15,0x00,0x16,0x00,0x17,0x00,
                                                      0x18,0x00,0x19,0x00,0x1A,0x00,0x1B,0x00,0x1C,0x00,0x1D,0x00,0x1E,0x00,0x1F,0x00,
                                                      0x20,0x00,0x21,0x00,0x22,0x00,0x23,0x00,0x24,0x00,0x25,0x00,0x26,0x00,0x27,0x00,
                                                      0x28,0x00,0x29,0x00,0x2A,0x00,0x2B,0x00,0x2C,0x00,0x2D,0x00,0x2E,0x00,0x2F,0x00,
                                                      0x30,0x00,0x31,0x00,0x32,0x00,0x33,0x00,0x34,0x00,0x35,0x00,0x36,0x00,0x37,0x00,
                                                      0x38,0x00,0x39,0x00,0x3A,0x00,0x3B,0x00,0x3C,0x00,0x3D,0x00,0x3E,0x00,0x3F,0x00,
                                                      0x40,0x00,0x41,0x00,0x42,0x00,0x43,0x00,0x44,0x00,0x45,0x00,0x46,0x00,0x47,0x00,
                                                      0x48,0x00,0x49,0x00,0x4A,0x00,0x4B,0x00,0x4C,0x00,0x4D,0x00,0x4E,0x00,0x4F,0x00,
                                                      0x50,0x00,0x51,0x00,0x52,0x00,0x53,0x00,0x54,0x00,0x55,0x00,0x56,0x00,0x57,0x00,
                                                      0x58,0x00,0x59,0x00,0x5A,0x00,0x5B,0x00,0x5C,0x00,0x5D,0x00,0x5E,0x00,0x5F,0x00,
                                                      0x60,0x00,0x61,0x00,0x62,0x00,0x63,0x00,0x64,0x00,0x65,0x00,0x66,0x00,0x67,0x00,
                                                      0x68,0x00,0x69,0x00,0x6A,0x00,0x6B,0x00,0x6C,0x00,0x6D,0x00,0x6E,0x00,0x6F,0x00,
                                                      0x70,0x00,0x71,0x00,0x72,0x00,0x73,0x00,0x74,0x00,0x75,0x00,0x76,0x00,0x77,0x00,
                                                      0x78,0x00,0x79,0x00,0x7A,0x00,0x7B,0x00,0x7C,0x00,0x7D,0x00,0x7E,0x00,0x7F,0x00 };

    public RocktronIntellifexS81Driver() {
        super("Mapping Data (81)", "Klaus Sailer");

        sysexID = "F0000029022B";
        
        patchSize = HSIZE + SSIZE + 2;

        checksumStart = HSIZE;
        checksumEnd = HSIZE + SSIZE;
        checksumOffset = HSIZE + SSIZE;

        patchNumbers = new String[] { "MappingData" };
    }

    protected String getPatchName(Patch p) {
            return "(MappingData)";
    }

    protected void setPatchName(Patch p, String name) {
             return;
    }

    protected void calculateChecksum(Patch patch, int start, int end, int offset) {
        byte sum = 0;
        for (int i=start; i<end; i++) {
            sum ^= patch.sysex[i];
        }
        patch.sysex[offset] = sum;
    }

    public Patch createNewPatch() {
        byte[] sysex = new byte[HSIZE + SSIZE + 2];
        sysex[0] = (byte) 0xF0; sysex[1] = (byte) 0x00; sysex[2] = (byte) 0x00;
        sysex[3] = (byte) 0x29; sysex[4] = (byte) 0x02; sysex[5] = (byte) 0x2B;
        System.arraycopy(defaultPatchData, 0, sysex, 6, SSIZE );
        sysex[HSIZE + SSIZE + 1] = (byte) 0xF7;

        Patch p = new Patch(sysex, this);
        calculateChecksum(p);
        return p;
    }

}
